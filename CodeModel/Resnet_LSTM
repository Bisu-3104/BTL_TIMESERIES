class MICNNLModel(nn.Module):
    def __init__(self):
        super(MICNNLModel, self).__init__()

        self.image_lstm = nn.LSTM(input_size=512, hidden_size=64, batch_first=True)
        self.ts_lstm = nn.LSTM(input_size=1, hidden_size=64, batch_first=True)

        self.dropout = nn.Dropout(p=0.4)
        self.norm_img = nn.LayerNorm(64)
        self.norm_rad = nn.LayerNorm(64)

        self.fc = nn.Sequential(
            nn.Linear(128, 64),
            nn.ReLU(),
            nn.Dropout(0.3),
            nn.Linear(64, 1)
        )

    def forward(self, img_feat_seq, rad_seq):
        img_out, _ = self.image_lstm(img_feat_seq)
        img_feat = self.norm_img(img_out[:, -1, :])
        img_feat = self.dropout(img_feat)

        rad_out, _ = self.ts_lstm(rad_seq)
        rad_feat = self.norm_rad(rad_out[:, -1, :])
        rad_feat = self.dropout(rad_feat)

        combined = torch.cat([img_feat, rad_feat], dim=1)
        output = self.fc(combined)
        return output.squeeze()
